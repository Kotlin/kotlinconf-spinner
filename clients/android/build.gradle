buildscript {

    repositories {
        mavenCentral()
        jcenter()
        google()
        maven {
            url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:1.3.30"
        classpath "com.android.tools.build:gradle:3.3.0"
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

def outDir = file('out')
def libsDir = file("$outDir/libs")
def platforms = [
        "armeabi-v7a": [konanTarget: "android_arm32"],
        "arm64-v8a"  : [konanTarget: "android_arm64"]
]

apply plugin: "konan"
apply plugin: 'com.android.application'

konan.targets = ['android_arm32', 'android_arm64']

konanArtifacts {

    interop ('openal') {
        defFile "openal.def"
        includeDirs "$openalPath/include"
        includeDirs "."
    }

    program ('Loader') {
        srcDir 'src/loader'
        artifactName 'libloader'
    }

    program ('Kotlin3d') {
        artifactName 'libkotlin3d'
        srcFiles fileTree('../shared/src/main/kotlin')
        srcFiles fileTree('src/main/kotlin')
        enableOptimizations true
        libraries {
            artifact 'openal'
            allLibrariesFrom common, json, kurl
        }

        target('android_arm32') {
            linkerOpts "-L$libcurlPath/lib/armeabi-v7a -lcurl " +
                    "$janssonPath/arm32/lib/libjansson.a " +
                    "-L$openalPath/lib/armeabi-v7a -lopenal -lz"
        }

        target('android_arm64') {
            linkerOpts "-L$libcurlPath/lib/arm64-v8a -lcurl " +
                    "$janssonPath/arm64/lib/libjansson.a " +
                    "-L$openalPath/lib/arm64-v8a -lopenal -lz"
        }

    }

    program ('Kotlin3dLight') {
        artifactName 'libkotlin3dlight'
        srcFiles fileTree('src/light/kotlin')
        srcFiles 'src/main/kotlin/renderer.kt', 'src/main/kotlin/StatsFetcherImpl.kt'
        srcFiles '../shared/src/main/kotlin/vectors.kt', '../shared/src/main/kotlin/states.kt'
        srcFiles '../shared/src/main/kotlin/control.kt', '../shared/src/main/kotlin/rendering.kt'
        srcFiles '../shared/src/main/kotlin/gl.kt'
        enableOptimizations true
        libraries {
            allLibrariesFrom common, json, kurl
        }

        target('android_arm32') {
            linkerOpts "-L$libcurlPath/lib/armeabi-v7a -lcurl " +
                    "$janssonPath/arm32/lib/libjansson.a " +
                    " -lz"
        }

        target('android_arm64') {
            linkerOpts "-L$libcurlPath/lib/arm64-v8a -lcurl " +
                    "$janssonPath/arm64/lib/libjansson.a " +
                    "-lz"
        }

    }
}

task copyLibs(type: Copy) {
    dependsOn konanArtifacts.Kotlin3d
    dependsOn konanArtifacts.Kotlin3dLight
    dependsOn konanArtifacts.Loader
    destinationDir libsDir

    platforms.each { name, platform ->
        into(name) {
            from konanArtifacts.Kotlin3d."$platform.konanTarget".artifact
            from konanArtifacts.Kotlin3dLight."$platform.konanTarget".artifact
            from konanArtifacts.Loader."$platform.konanTarget".artifact
            from file("$openalPath/lib/$name/libopenal.so")
        }
    }
}

task deleteOut(type: Delete) {
    delete outDir
}

clean.dependsOn deleteOut


tasks.matching { it.name == 'preBuild' }.all {
    it.dependsOn copyLibs
}

android {
    compileSdkVersion 25

    defaultConfig {
        applicationId 'com.jetbrains.konan_activity2'
        minSdkVersion    19
        targetSdkVersion 21

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile = file(RELEASE_STORE_FILE)
                storePassword = RELEASE_STORE_PASSWORD
                keyAlias = RELEASE_KEY_ALIAS
                keyPassword = RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            debuggable = true
            ndk {
                 debuggable = true
            }
        }
        release {
            // Add RELEASE_STORE_FILE RELEASE_STORE_PASSWORD RELEASE_KEY_ALIAS
            // and RELEASE_KEY_PASSWORD to ~/.gradle/gradle.properties
            // to sign release build. Keystore could be created from
            // Android Studio.
            if (project.hasProperty("RELEASE_STORE_FILE")) {
               signingConfig = signingConfigs.release
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDir libsDir
        }
    }

    lintOptions {
        abortOnError false
    }

}

task buildApk(type: Copy) {
    dependsOn "assembleDebug", "assembleRelease"
    destinationDir outDir
    from 'build/outputs/apk'
}

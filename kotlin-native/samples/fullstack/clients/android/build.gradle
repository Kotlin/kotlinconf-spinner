buildscript {

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:+"
        classpath 'com.android.tools.build:gradle-experimental:0.9.2'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

// TODO: Get rid of an absolute path
project.ext.libcurlPath = '/Users/jetbrains/work/curl-android-ios'
project.ext.janssonPath = '/Users/jetbrains/work/dist/jansson/android'

apply plugin: "konan"


def platforms = [
    [name: "arm32", konanTarget: "android_arm32", targetPlatform: "armeabi-v7a", artifact: "PolyhedronArm32"],
    [name: "arm64", konanTarget: "android_arm64", targetPlatform: "arm64-v8a", artifact: "PolyhedronArm64"]
]


konanInterop {
    platforms.each { platform ->
        "platform_${platform.name}" {
            defFile "android.def"
            pkg "android"
            // TODO: launcher header will be part of the platform library.
            includeDirs "."
            target platform.konanTarget
        }

        "common_${platform.name}" {
            defFile "../../common/common.def"
            pkg "common"
            //includeDirs  ""
            target platform.konanTarget
        }

        "jansson_${platform.name}" {
            defFile "../../json/jansson.def"
            pkg "jansson"
            includeDirs  "${project.ext.janssonPath}/${platform.name}/include"
            target platform.konanTarget
        }

        "libcurl_${platform.name}" {
            defFile "../../kurl/libcurl.def"
            pkg "libcurl"
            includeDirs  "${project.ext.libcurlPath}/prebuilt-with-ssl/android/include"
            target platform.konanTarget
        }
    }
}

konanArtifacts {
    platforms.each { platform ->
        "Kommon_${platform.name}" {
            useInterop "common_${platform.name}"
            inputFiles "../../common/Kommon.kt", "../../common/KommonLinux.kt"
            produce "library"
            target platform.konanTarget
        }

        "KJson_${platform.name}" {
            useInterop "jansson_${platform.name}"
            inputFiles "../../json/KJson.kt"
            library konanArtifacts["Kommon_${platform.name}"].compilationTask.artifact
            dependsOn(konanArtifacts["Kommon_${platform.name}"].compilationTask)
            produce "library"
            target platform.konanTarget
        }

        "Kurl_${platform.name}" {
            useInterop "common_${platform.name}"
            useInterop "libcurl_${platform.name}"
            inputFiles "../../kurl/KUrl.kt"
            library konanArtifacts["Kommon_${platform.name}"].compilationTask.artifact
            dependsOn(konanArtifacts["Kommon_${platform.name}"].compilationTask)
            produce "library"
            target platform.konanTarget
        }

        "$platform.artifact" {
            useInterop "platform_${platform.name}"
            library konanArtifacts["Kommon_${platform.name}"].compilationTask.artifact
            library konanArtifacts["KJson_${platform.name}"].compilationTask.artifact
            library konanArtifacts["Kurl_${platform.name}"].compilationTask.artifact
            library konanInterop["common_${platform.name}"].interopProcessingTask.kLib
            library konanInterop["jansson_${platform.name}"].interopProcessingTask.kLib
            library konanInterop["libcurl_${platform.name}"].interopProcessingTask.kLib
            dependsOn(konanArtifacts["Kommon_${platform.name}"].compilationTask)
            dependsOn(konanArtifacts["KJson_${platform.name}"].compilationTask)
            dependsOn(konanArtifacts["Kurl_${platform.name}"].compilationTask)
            linkerOpts "-L${project.ext.libcurlPath}/curl-compile-scripts/obj/local/${platform.targetPlatform} -lcurl ${project.ext.janssonPath}/${platform.name}/lib/libjansson.a"
            target platform.konanTarget
            outputDir platform.artifact
            outputName 'libpoly'
            enableOptimization()
        }
    }
}



apply plugin: "com.android.model.application"

model {
    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig {
            applicationId = 'com.android.konan_activity'
            minSdkVersion.apiLevel   9
            targetSdkVersion.apiLevel  25
        }

        ndk {
            moduleName = "polyhedron"
        }

        productFlavors {
            create("arm") {
                ndk {
                    abiFilters.addAll(platforms.collect { it.targetPlatform })
                }
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            libpoly {
                    binaries.withType(SharedLibraryBinary) {
                        def name = targetPlatform.getName()
                        def index = platforms.collect { it.targetPlatform }.indexOf(name)
                        if (index >= 0)
                            sharedLibraryFile = file("${platforms[index].artifact}/libpoly.so")
                    }
            }
            /*libcurl {
                    binaries.withType(SharedLibraryBinary) {
                        def name = targetPlatform.getName()
                        def index = platforms.indexOf(name)
                        if (index >= 0)
                            sharedLibraryFile = file("/Users/jetbrains/work/curl-android-ios/curl-compile-scripts/obj/local/${name}/libcurl.so")
                    }
            }*/
        }
    }
    android.sources {
        main {
            jniLibs {
                dependencies {
                    library "libpoly"
                    //library "libcurl"
                }
            }
        }
    }
}

tasks.matching { it.name == 'preBuild' }.all {
    it.dependsOn 'compileKonanPolyhedronArm32'
    it.dependsOn 'compileKonanPolyhedronArm64'
}

task buildApk(type: DefaultTask) {
    dependsOn "compileKonanPolyhedronArm32"
    dependsOn "compileKonanPolyhedronArm64"
    dependsOn "assembleDebug"
}

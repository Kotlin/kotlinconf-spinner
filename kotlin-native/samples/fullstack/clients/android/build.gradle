buildscript {
    repositories {
       jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.9.2'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:+"
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: "konan"

konanInterop {
    arm32 {
        defFile "android.def"
        pkg "android"
        // TODO: launcher header will be part of the platform library.
        includeDirs "."
        target "android_arm32"
    }
    arm64 {
        defFile "android.def"
        pkg "android"
        // TODO: launcher header will be part of the platform library.
        includeDirs "."
        target "android_arm64"
    }
    libcurl_arm32 {
        defFile "../../kurl/libcurl.def"
        pkg "libcurl"
        includeDirs  '/Users/jetbrains/work/curl-android-ios/prebuilt-with-ssl/android/include'
        target "android_arm32"
    }
    libcurl_arm64 {
        defFile "../../kurl/libcurl.def" 
        pkg "libcurl"
        includeDirs '/Users/jetbrains/work/curl-android-ios/prebuilt-with-ssl/android/include'
        target "android_arm64"
    }
}

konanArtifacts {
    KurlArm32 {
        useInterop "libcurl_arm32"
        inputFiles "../../kurl/KUrl.kt"
        produce "library"
        target "android_arm32"
    }
    KurlArm64 {
        useInterop "libcurl_arm64"
        inputFiles "../../kurl/KUrl.kt"
        produce "library"
        target "android_arm64"
    }
    PolyhedronArm32 {
        useInterop "arm32"
        library konanArtifacts["KurlArm32"].compilationTask.artifact
        library konanInterop["libcurl_arm32"].compileStubsTask.artifact
        dependsOn(konanArtifacts["KurlArm32"].compilationTask)
        linkerOpts "-L/Users/jetbrains/work/curl-android-ios/curl-compile-scripts/obj/local/armeabi-v7a -lcurl"
        target "android_arm32"
        outputDir 'PolyhedronArm32'
        outputName 'libpoly'
        enableOptimization()
    }
    PolyhedronArm64 {
        useInterop "arm64"
        library konanArtifacts["KurlArm64"].compilationTask.artifact
        library konanInterop["libcurl_arm64"].compileStubsTask.artifact
        dependsOn(konanArtifacts["KurlArm64"].compilationTask)
        linkerOpts "-L/Users/jetbrains/work/curl-android-ios/curl-compile-scripts/obj/local/arm64-v8a -lcurl"
        target "android_arm64"
        outputDir 'PolyhedronArm64'
        outputName 'libpoly'
        enableOptimization()
    }
}

def platforms = ["armeabi-v7a", "arm64-v8a"]
def artifacts = ["PolyhedronArm32", "PolyhedronArm64"]

apply plugin: "com.android.model.application"

model {
    android {
        compileSdkVersion = 25
        buildToolsVersion = '25.0.2'

        defaultConfig {
            applicationId = 'com.android.konan_activity'
            minSdkVersion.apiLevel   9
            targetSdkVersion.apiLevel  25
        }

        ndk {
            moduleName = "polyhedron"
        }

        productFlavors {
            create("arm") {
                ndk {
                    abiFilters.addAll(platforms)
                }
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            libpoly {
                    binaries.withType(SharedLibraryBinary) {
                        def name = targetPlatform.getName()
                        def index = platforms.indexOf(name)
                        if (index >= 0)
                            sharedLibraryFile = file("${artifacts[index]}/libpoly.so")
                    }
            }
            /*libcurl {
                    binaries.withType(SharedLibraryBinary) {
                        def name = targetPlatform.getName()
                        def index = platforms.indexOf(name)
                        if (index >= 0)
                            sharedLibraryFile = file("/Users/jetbrains/work/curl-android-ios/curl-compile-scripts/obj/local/${name}/libcurl.so")
                    }
            }*/
        }
    }
    android.sources {
        main {
            jniLibs {
                dependencies {
                    library "libpoly"
                    //library "libcurl"
                }
            }
        }
    }
}

tasks.matching { it.name == 'preBuild' }.all {
    it.dependsOn 'compileKonanPolyhedronArm32'
    it.dependsOn 'compileKonanPolyhedronArm64'
}

task buildApk(type: DefaultTask) {
    dependsOn "compileKonanPolyhedronArm32"
    dependsOn "compileKonanPolyhedronArm64"
    dependsOn "assembleDebug"
}
